use std::cmp::max;
use std::num::NonZeroUsize;
use std::path::{Path, PathBuf};
use std::process::exit;
use std::sync::Arc;

use clap::Parser;
use futures::channel::mpsc::Sender;
use futures::future::ready;
use futures::{SinkExt, Stream, StreamExt};
use itertools::Itertools;
use rune::Source;
use status_line::StatusLine;
use tokio::runtime::Builder;
use tokio::time::{Duration, Instant};
use tokio_stream::wrappers::IntervalStream;

use config::RunCommand;

use crate::config::{AppConfig, Command, ShowCommand};
use crate::deadline::Deadline;
use crate::error::{LatteError, Result};
use crate::interrupt::InterruptHandler;
use crate::progress::Progress;
use crate::report::{Report, RunConfigCmp};
use crate::session::*;
use crate::session::{CassError, CassErrorKind, Session, SessionStats};
use crate::stats::{BenchmarkCmp, BenchmarkStats, Recorder};
use crate::workload::{FnRef, Workload, WorkloadStats, LOAD_FN, RUN_FN};

mod config;
mod deadline;
mod error;
mod interrupt;
mod progress;
mod report;
mod session;
mod stats;
mod workload;

#[global_allocator]
static ALLOC: jemallocator::Jemalloc = jemallocator::Jemalloc;

fn interval_stream(rate: f64) -> IntervalStream {
    let interval = Duration::from_nanos(max(1, (1000000000.0 / rate) as u64));
    IntervalStream::new(tokio::time::interval(interval))
}

/// Rounds the duration down to the highest number of whole periods
fn round(duration: Duration, period: Duration) -> Duration {
    let mut duration = duration.as_micros();
    duration /= period.as_micros();
    duration *= period.as_micros();
    Duration::from_micros(duration as u64)
}

/// Fetches session statistics and sends them to the channel
async fn send_stats(workload: &Workload, time: Instant, tx: &mut Sender<Result<WorkloadStats>>) {
    let stats = workload.take_stats(time);
    tx.send(Ok(stats)).await.unwrap();
}

/// Runs a series of requests on a separate thread and
/// produces a stream of QueryStats
async fn req_stream(
    concurrency: NonZeroUsize,
    rate: Option<f64>,
    sampling_period: Duration,
    workload: Workload,
    deadline: Arc<Deadline>,
    progress: Arc<StatusLine<Progress>>,
    interrupt: Arc<InterruptHandler>,
) -> impl Stream<Item = Result<WorkloadStats>> {
    let (mut tx, rx) = futures::channel::mpsc::channel(16);

    tokio::spawn(async move {
        // prevent further moves, make it shared for all iterations in this thread
        let workload = &workload;

        let rate = rate.unwrap_or(f64::MAX);

        // A stream of Result<RequestStats> objects, each object generated by an invocation
        // of the action.
        let mut req_stats = {
            interval_stream(rate)
                .map(|_| deadline.next())
                .take_while(|i| ready(i.is_some()))
                .map(|i| tokio::task::unconstrained(workload.run(i.unwrap() as i64)))
                .buffer_unordered(concurrency.get())
                .inspect(|_| progress.tick())
        };

        // The following loop takes the stats generated by the stream and aggregates them
        // into chunks of `sampling_period` length. When a chunk is ready, it is sent out.
        let mut start_time = Instant::now();
        workload.reset(start_time);
        while let Some(req) = req_stats.next().await {
            if interrupt.is_interrupted() {
                break;
            }

            match req {
                Ok(_) | Err(LatteError::Cassandra(CassError(CassErrorKind::Overloaded(_)))) => {
                    let now = Instant::now();
                    if now - start_time > sampling_period {
                        start_time += round(now - start_time, sampling_period);
                        send_stats(workload, start_time, &mut tx).await;
                    }
                }
                // This can happen if an error happened during generation of data or some other
                // problem on the client-side. In this case there is no point in
                // continuing.
                Err(e) => {
                    tx.send(Err(e)).await.unwrap();
                    return;
                }
            }
        }
        // Send the statistics of remaining requests
        send_stats(workload, Instant::now(), &mut tx).await;
    });

    rx
}

/// Waits until one item arrives in each of the streams
/// and collects them into a vector.
/// Finished streams are removed from `streams`.
async fn take_one_of_each<S, T>(streams: &mut Vec<S>) -> Vec<T>
where
    S: Stream<Item = T> + std::marker::Unpin,
{
    let mut result = Vec::with_capacity(streams.len());
    for i in (0..streams.len()).rev() {
        match streams[i].next().await {
            Some(item) => {
                result.push(item);
            }
            None => {
                streams.swap_remove(i);
            }
        }
    }
    result
}

/// Controls the intensity of requests sent to the server
struct ExecutionOptions {
    /// How long to execute
    duration: config::Duration,
    /// Maximum rate of requests in requests per second, `None` means no limit
    rate: Option<f64>,
    /// Number of parallel threads of execution
    threads: NonZeroUsize,
    /// Number of outstanding async requests per each thread
    concurrency: NonZeroUsize,
}

/// Executes the given function many times in parallel.
/// Draws a progress bar.
/// Returns the statistics such as throughput or duration histogram.
///
/// # Parameters
///   - `name`: text displayed next to the progress bar
///   - `count`: number of iterations
///   - `exec_options`: controls execution options such as parallelism level and rate
///   - `workload`: encapsulates a set of queries to execute
async fn par_execute(
    name: &str,
    exec_options: &ExecutionOptions,
    sampling_period: Duration,
    workload: Workload,
    signals: Arc<InterruptHandler>,
) -> Result<BenchmarkStats> {
    let threads_count = exec_options.threads.get();
    let concurrency = exec_options.concurrency;
    let rate = exec_options.rate;
    let progress = match exec_options.duration {
        config::Duration::Count(count) => Progress::with_count(name.to_string(), count),
        config::Duration::Time(duration) => Progress::with_duration(name.to_string(), duration),
    };
    let progress = Arc::new(StatusLine::new(progress));
    let deadline = Arc::new(Deadline::new(exec_options.duration));
    let mut stats = Recorder::start(rate, concurrency);

    let mut streams = Vec::with_capacity(threads_count);

    for _ in 0..threads_count {
        let s = req_stream(
            concurrency,
            rate.map(|r| r / (threads_count as f64)),
            sampling_period,
            workload.clone(),
            deadline.clone(),
            progress.clone(),
            signals.clone(),
        );
        streams.push(s.await)
    }

    while !streams.is_empty() {
        let samples = take_one_of_each(&mut streams).await;
        let samples: Vec<WorkloadStats> = samples.into_iter().try_collect()?;
        if !samples.is_empty() {
            let aggregate = stats.record(&samples);
            if sampling_period.as_secs() < u64::MAX {
                progress.set_visible(false);
                println!("{}", aggregate);
                progress.set_visible(true);
            }
        }
    }

    Ok(stats.finish())
}

fn load_report_or_abort(path: &Path) -> Report {
    match Report::load(path) {
        Ok(r) => r,
        Err(e) => {
            eprintln!(
                "error: Failed to read report from {}: {}",
                path.display(),
                e
            );
            exit(1)
        }
    }
}

/// Constructs the output report file name from the parameters in the command.
/// Separates parameters with underscores.
fn get_default_output_name(conf: &RunCommand) -> PathBuf {
    let name = conf
        .workload
        .file_stem()
        .unwrap()
        .to_string_lossy()
        .to_string();

    let mut components = vec![name];
    components.extend(conf.cluster_name.iter().map(|x| x.replace(" ", "_")));
    components.extend(conf.cass_version.iter().cloned());
    components.extend(conf.tags.iter().cloned());
    if let Some(r) = conf.rate {
        components.push(format!("r{}", r))
    };
    components.push(format!("p{}", conf.concurrency));
    components.push(format!("t{}", conf.threads));
    components.push(format!("c{}", conf.connections));
    let params = conf.params.iter().map(|(k, v)| format!("{}{}", k, v));
    components.extend(params);
    components.push(chrono::Local::now().format("%Y%m%d.%H%M%S").to_string());
    PathBuf::from(format!("{}.json", components.join(".")))
}

async fn run(conf: RunCommand) -> Result<()> {
    let mut conf = conf.set_timestamp_if_empty();
    let compare = conf.baseline.as_ref().map(|p| load_report_or_abort(p));
    eprintln!(
        "info: Loading workload script {}...",
        conf.workload.display()
    );
    let script = Source::from_path(&conf.workload)
        .map_err(|e| LatteError::ScriptRead(conf.workload.clone(), e))?;

    let mut program = workload::Program::new(script, conf.params.iter().cloned().collect())?;

    if !program.has_run() {
        eprintln!("error: Function `run` not found in the workload script.");
        exit(255);
    }

    eprintln!("info: Connecting to {:?}... ", conf.addresses);
    let session = connect_or_abort(&conf).await;
    let cluster_info = session
        .query("SELECT cluster_name, release_version FROM system.local", ())
        .await;
    if let Ok(rs) = cluster_info {
        if let Some(rows) = rs.rows {
            if let Some(row) = rows.into_iter().next() {
                if let Ok((cluster_name, cass_version)) = row.into_typed() {
                    conf.cluster_name = Some(cluster_name);
                    conf.cass_version = Some(cass_version);
                }
            }
        }
    }

    eprintln!(
        "info: Connected to {} running Cassandra version {}",
        conf.cluster_name.as_deref().unwrap_or("unknown"),
        conf.cass_version.as_deref().unwrap_or("unknown")
    );

    let mut session = Session::new(session);

    if program.has_schema() {
        eprintln!("info: Creating schema...");
        if let Err(e) = program.schema(&mut session).await {
            eprintln!("error: Failed to create schema: {}", e);
            exit(255);
        }
    }

    if program.has_erase() && !conf.no_load {
        eprintln!("info: Erasing data...");
        if let Err(e) = program.erase(&mut session).await {
            eprintln!("error: Failed to erase: {}", e);
            exit(255);
        }
    }

    if program.has_prepare() {
        eprintln!("info: Preparing...");
        if let Err(e) = program.prepare(&mut session).await {
            eprintln!("error: Failed to prepare: {}", e);
            exit(255);
        }
    }

    let program = Arc::new(program);
    let loader = Workload::new(session.clone(), program.clone(), FnRef::new(LOAD_FN));
    let runner = Workload::new(session.clone(), program.clone(), FnRef::new(RUN_FN));

    let interrupt = Arc::new(InterruptHandler::install());

    if !conf.no_load {
        let load_count = program.load_count();
        if load_count > 0 && program.has_load() {
            eprintln!("info: Loading data...");
            let load_options = ExecutionOptions {
                duration: config::Duration::Count(load_count),
                rate: None,
                threads: conf.threads,
                concurrency: conf.load_concurrency,
            };
            par_execute(
                "Loading...",
                &load_options,
                Duration::from_secs(u64::MAX),
                loader,
                interrupt.clone(),
            )
            .await?;
        }
    }

    if interrupt.is_interrupted() {
        return Err(LatteError::Interrupted);
    }

    if conf.warmup_duration.is_not_zero() {
        eprintln!("info: Warming up...");
        let warmup_options = ExecutionOptions {
            duration: conf.warmup_duration,
            rate: None,
            threads: conf.threads,
            concurrency: conf.concurrency,
        };
        par_execute(
            "Warming up...",
            &warmup_options,
            Duration::from_secs(u64::MAX),
            runner.clone(),
            interrupt.clone(),
        )
        .await?;
    }

    if interrupt.is_interrupted() {
        return Err(LatteError::Interrupted);
    }

    eprintln!("info: Running benchmark...");

    println!(
        "{}",
        RunConfigCmp {
            v1: &conf,
            v2: compare.as_ref().map(|c| &c.conf),
        }
    );

    let exec_options = ExecutionOptions {
        duration: conf.run_duration,
        concurrency: conf.concurrency,
        rate: conf.rate,
        threads: conf.threads,
    };
    report::print_log_header();
    let stats = par_execute(
        "Running...",
        &exec_options,
        Duration::from_secs_f64(conf.sampling_period),
        runner,
        interrupt.clone(),
    )
    .await?;

    let stats_cmp = BenchmarkCmp {
        v1: &stats,
        v2: compare.as_ref().map(|c| &c.result),
    };
    println!();
    println!("{}", &stats_cmp);

    let path = conf
        .output
        .clone()
        .unwrap_or_else(|| get_default_output_name(&conf));

    let report = Report::new(conf, stats);
    match report.save(&path) {
        Ok(()) => {}
        Err(e) => {
            eprintln!("error: Failed to save report to {}: {}", path.display(), e);
            exit(1)
        }
    }
    Ok(())
}

async fn show(conf: ShowCommand) -> Result<()> {
    let report1 = load_report_or_abort(&conf.report);
    let report2 = conf.baseline.map(|p| load_report_or_abort(&p));

    let config_cmp = RunConfigCmp {
        v1: &report1.conf,
        v2: report2.as_ref().map(|r| &r.conf),
    };
    println!("{}", config_cmp);

    let results_cmp = BenchmarkCmp {
        v1: &report1.result,
        v2: report2.as_ref().map(|r| &r.result),
    };
    println!("{}", results_cmp);
    Ok(())
}

async fn async_main(command: Command) -> Result<()> {
    match command {
        Command::Run(config) => run(config).await?,
        Command::Show(config) => show(config).await?,
    }
    Ok(())
}

fn main() {
    console::set_colors_enabled(true);
    let command = AppConfig::parse().command;
    let runtime = match &command {
        Command::Run(cmd) if cmd.threads.get() > 1 => Builder::new_multi_thread()
            .worker_threads(cmd.threads.get())
            .enable_all()
            .build(),
        _ => Builder::new_current_thread().enable_all().build(),
    };
    if let Err(e) = runtime.unwrap().block_on(async_main(command)) {
        eprintln!("error: {}", e);
        exit(128);
    }
}

#[cfg(test)]
mod test {
    use super::*;

    #[tokio::test]
    async fn test_take_one_of_each() {
        let s1 = futures::stream::iter(1..=3);
        let s2 = futures::stream::iter(1..=2);
        let s3 = futures::stream::iter(1..=2);
        let mut streams = vec![s1, s2, s3];
        assert_eq!(take_one_of_each(&mut streams).await, vec![1, 1, 1]);
        assert_eq!(take_one_of_each(&mut streams).await, vec![2, 2, 2]);
        assert_eq!(take_one_of_each(&mut streams).await, vec![3]);
        assert_eq!(take_one_of_each(&mut streams).await, Vec::<u32>::new());
        assert!(streams.is_empty());
    }
}
