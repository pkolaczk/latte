use common::{KEYSPACE, TABLE, ROW_COUNT, LC, MC, HC};
use latte::*;

mod common;

// Total number of partitions in the table:
const PAR_COUNT = latte::param!("partitions", ROW_COUNT);

const TIME_DELTA = latte::param!("time_delta", 1000);

const INSERT_ROW = "insert_row";

pub async fn schema(db) {
    db.execute(`
        CREATE KEYSPACE IF NOT EXISTS ${KEYSPACE}
            WITH replication = {'class': 'SimpleStrategy', 'replication_factor': 1 }`).await?;
    db.execute(`
        DROP TABLE IF EXISTS ${KEYSPACE}.${TABLE}`).await?;
    db.execute(`
        CREATE TABLE ${KEYSPACE}.${TABLE} (
            par_id bigint,
            row_id uuid,
            time1 timestamp,
            time2 timestamp,
            hc bigint,
            mc bigint,
            lc bigint,
            tag text,
            vec vector<float, 2>,
            PRIMARY KEY (par_id, row_id)
        )`).await?;

    db.execute(`CREATE CUSTOM INDEX IF NOT EXISTS ON ${KEYSPACE}.${TABLE}(time1) USING 'StorageAttachedIndex'`).await?;
    db.execute(`CREATE CUSTOM INDEX IF NOT EXISTS ON ${KEYSPACE}.${TABLE}(time2) USING 'StorageAttachedIndex'`).await?;
    db.execute(`CREATE CUSTOM INDEX IF NOT EXISTS ON ${KEYSPACE}.${TABLE}(hc) USING 'StorageAttachedIndex'`).await?;
    db.execute(`CREATE CUSTOM INDEX IF NOT EXISTS ON ${KEYSPACE}.${TABLE}(mc) USING 'StorageAttachedIndex'`).await?;
    db.execute(`CREATE CUSTOM INDEX IF NOT EXISTS ON ${KEYSPACE}.${TABLE}(lc) USING 'StorageAttachedIndex'`).await?;
    db.execute(`CREATE CUSTOM INDEX IF NOT EXISTS ON ${KEYSPACE}.${TABLE}(tag) USING 'StorageAttachedIndex'`).await?;
    db.execute(`CREATE CUSTOM INDEX IF NOT EXISTS ON ${KEYSPACE}.${TABLE}(vec) USING 'StorageAttachedIndex'`).await?;
}

pub async fn erase(db) {
    db.execute(`TRUNCATE TABLE ${KEYSPACE}.${TABLE}`).await?;
}

pub async fn prepare(db) {
    db.load_cycle_count = ROW_COUNT;
    db.prepare(INSERT_ROW,
        `INSERT INTO ${KEYSPACE}.${TABLE}(par_id, row_id, time1, time2, hc, mc, lc, tag)
         VALUES (?, ?, ?, ?, ?, ?, ?, ?)`).await?;
}

pub async fn load(db, i) {
    let par_id = hash_range(i, PAR_COUNT);
    let row_id = uuid(i);
    let time1 = i * 1000;
    let time2 = (i + TIME_DELTA) * 1000;
    let hc = hash2(i, 1) % HC;
    let mc = hash2(i, 2) % MC;
    let lc = hash2(i, 3) % LC;
    let tag = "text text text";
    let vec = normal_vec(i, 2, 0.0, 1.0);
    db.execute_prepared(INSERT_ROW, [par_id, row_id, time1, time2, hc, mc, lc, tag]).await?;
}
